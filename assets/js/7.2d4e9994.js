(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{163:function(e,t,n){"use strict";n.r(t);var r=n(0),s=Object(r.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),n("p",[e._v('任务的执行不取决于代码的顺序，而取决于某个事件是否发生。上面代码中，console.log("Hello") 直到 button 被点击后才会被执行。当 button 被点击，赋值给 onclick 的函数就被添加到作业队列的尾部，并在队列前部所有任务结束之后再执行。')]),e._v(" "),n("p",[e._v("事件模型适用于处理简单的交互，若将多个独立的异步调用连接在一起，必须跟踪每个事件的事件目标，会使程序更加复杂，运行流程会变得很不清晰。")]),e._v(" "),e._m(6),e._v(" "),n("p",[e._v("我们来看一下比较经典的使用 jsonp 解决跨域问题的示例：")]),e._v(" "),e._m(7),n("p",[e._v("初看这种模式运作得相当好，简单、容易理解，但你可能会迅速的发现这样的模式不利于代码的阅读和维护，各个部分之间耦合度太高，容易陷入回调地狱。就像这样：")]),e._v(" "),e._m(8),n("p",[e._v("Promise 能大幅度改善这种情况。我们来看下Promise 是如何实现的：")]),e._v(" "),e._m(9),n("p",[e._v("是不是清晰很多？是不是很神奇？接下来一起来学习一下 Promise 吧！")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),n("p",[e._v("我们先来看下 Promise 的方法有哪些：")]),e._v(" "),e._m(12),e._v(" "),n("p",[e._v("Promise 函数的执行，都是依赖于状态的改变，这三种状态要记牢哦：")]),e._v(" "),n("blockquote"),e._v(" "),n("p",[e._v("Pending：进行中\nFulfilled：已成功\nRejected：已失败")]),e._v(" "),n("p",[e._v("Promise 优点：")]),e._v(" "),n("blockquote"),e._v(" "),n("p",[e._v("1）对象的状态不受外界影响。\n2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。\n3）将异步操作以同步操作的流程表达出来，避免了层层嵌套回调函数。\n4）提供统一的接口，使得控制异步操作更加容易。")]),e._v(" "),n("p",[e._v("Promise 缺点：")]),e._v(" "),n("blockquote"),e._v(" "),n("p",[e._v("1）无法取消 Promise，一旦新建它就会立即执行，无法中途取消。\n2）如果不设置回调函数，Promise 内部抛出的错误，不会反映到外部。\n3）当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),e._v(" "),n("p",[e._v("了解了 Promise 的方法，3种状态以及特点和优缺点之后，接下来我们来看一下 Promise 是怎么使用的。")]),e._v(" "),e._m(13),e._v(" "),n("p",[e._v("我们来创造一个读取文件的 Promise 实例：")]),e._v(" "),e._m(14),n("p",[e._v("上述实例中 resolve 函数的作用是，将 Promise 对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；")]),e._v(" "),n("p",[e._v("reject 函数的作用是，将 Promise 对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),e._v(" "),e._m(15),e._v(" "),n("p",[e._v("Promise 实例生成以后，就可以用 then 方法来分别指定 resolved 状态和 rejected 状态的回调函数了。")]),e._v(" "),e._m(16),n("p",[e._v("我们可以看到，then 方法接受两个回调函数作为参数；\n第一个回调函数在 Promise 对象的状态变为 resolved 时调用；\n第二个回调函数在 Promise 对象的状态变为 rejected 时调用；\n其中，第二个函数是可选的。这两个函数都接受 Promise 对象传出的值作为参数。")]),e._v(" "),n("p",[e._v("Promise.then 方法每次调用，都返回一个新的 Promise 对象，所以支持链式写法。")]),e._v(" "),e._m(17),e._m(18),e._v(" "),n("p",[e._v("Promise.prototype.catch 方法是 .then(null, rejection) 的别名，相当于 then 函数的第一个参数传入 null，第二个参数传入发生错误时的回调函数。")]),e._v(" "),e._m(19),e._m(20),e._v(" "),n("p",[e._v("finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的，目前大部分浏览器还不支持，不过可以自己实现。")]),e._v(" "),n("p",[e._v("finally 方法的实现：")]),e._v(" "),e._m(21),n("p",[e._v("finally 方法的使用：")]),e._v(" "),e._m(22),e._m(23),e._v(" "),n("p",[e._v("Promise.all 方法可以将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),e._m(24),n("p",[e._v("新的 Promise p 的状态由 p1、p2、p3 决定，只有当 p1、p2、p3 的状态都变成了 fulfilled，p 的状态才会变成 fulfilled；只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成了 rejected。")]),e._v(" "),n("p",[e._v("注意，如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发Promise.all()的 catch 方法的。")]),e._v(" "),n("p",[e._v("如果 p2 有自己的 catch 方法，就不会调用 Promise.all() 的 catch 方法。")]),e._v(" "),e._m(25),n("p",[e._v("如果 p2 没有自己的 catch 方法，就会调用 Promise.all() 的 catch 方法。")]),e._v(" "),e._m(26),e._m(27),e._v(" "),n("p",[e._v("Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),e._m(28),n("p",[e._v("新的Promise p，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。")]),e._v(" "),e._m(29),e._m(30),e._v(" "),n("p",[e._v("有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用，返回一个 fulfilled 状态的 Promise 对象。")]),e._v(" "),e._m(31),e._m(32),e._v(" "),n("p",[e._v("Promise.reject(reason) 方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。")]),e._v(" "),e._m(33),e._m(34),e._v(" "),n("p",[e._v("让同步函数同步执行，异步函数异步执行。")]),e._v(" "),e._m(35),e._m(36),e._v(" "),e._m(37),e._v(" "),n("p",[e._v("实现方法：")]),e._v(" "),e._m(38),n("p",[e._v("调用：")]),e._v(" "),e._m(39),e._m(40),e._v(" "),n("p",[e._v("实现方法：")]),e._v(" "),e._m(41),n("p",[e._v("调用：")]),e._v(" "),e._m(42),e._m(43),e._v(" "),e._m(44),e._m(45),e._v(" "),e._m(46),n("p",[e._v("参考文章\n"),n("a",{attrs:{href:"https://www.promisejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 官网"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"http://es6.ruanyifeng.com/?search=promise&x=0&y=0#docs/promise",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6 入门"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://juejin.im/post/5b32f552f265da59991155f0",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 源码详解"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://juejin.im/post/5b83cb5ae51d4538cc3ec354",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 实现原理（附源码）"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://www.npmjs.com/package/es6-promise-try",target:"_blank",rel:"noopener noreferrer"}},[e._v("es6-promise-try npm"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://developers.google.com/web/fundamentals/primers/promises",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript Promise：简介"),n("OutboundLink")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise","aria-hidden":"true"}},[this._v("#")]),this._v(" Promise")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("JavaScript 解决异步编程有两种主要方式：事件模型和回调函数。但是随着业务越来越复杂，这两种方式已经不能满足开发者的需求了，Promise 可以解决这方面的问题。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("为了更好的理解 Promise 是如何工作的，我们先来了解一下传统的异步编程的方式。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"异步编程的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程的方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 异步编程的方式")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_1-事件模型："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-事件模型：","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 事件模型：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('let button = document.getElementId("my-btn");\nbutton.onclick = function() {\n  console.log("Hello");\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-回调函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-回调函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 回调函数")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function callback (res) {\n  document.getElementById('d1').innerHTML = res.result.address\n  console.log('Your public IP address is: ', res)\n}\nfunction jsonp (lat, lng) {\n  let src = `https://apis.map.qq.com/ws/geocoder/v1/?location=${lat},${lng}&key=yourKey&output=jsonp&callback=callback`\n  let script = document.createElement('script')\n  script.setAttribute(\"type\",\"text/javascript\")\n  script.src = src;\n  document.body.appendChild(script)\n}\njsonp(39.92, 116.43)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("method1(function(err, result) {\n  if (err) {\n    throw err\n  }\n\n  method2(function(err, result) {\n    if (err) {\n      throw err\n    }\n\n    method3(function(err, result) {\n      if (err) {\n        throw err\n      }\n\n      method4(function(err, result) {\n        if (err) {\n          throw err\n        }\n\n        method5(result)\n      })\n    })\n  })\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("let promise = new Promise((resolve, reject) => {\n  // ... method 1 some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n})\npromise.then((value) => {\n  // method 2 some code\n}).then((value) => {\n  // method 3 some code\n}).then((value) => {\n  // method 4 some code\n}).then((value) => {\n  // method 5 some code\n}).catch((err) => {\n  // some err code\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"promise-相关知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise-相关知识","aria-hidden":"true"}},[this._v("#")]),this._v(" Promise 相关知识")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_1-promise-的基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-promise-的基础知识","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. Promise 的基础知识")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Promise.Prototype.then()\nPromise.Prototype.catch()\nPromise.Prototype.finally()\nPromise.all()\nPromise.race()\nPromise.resolve()\nPromise.reject()\nPromise.try()")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_2-promise-的基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-promise-的基本用法","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. Promise 的基本用法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const fs = require('fs')\nconst path = require('path')\n\nfunction readFile (filename) {\n  return new Promise (function (resolve, reject) {\n    // reject(new Error('err'))\n    //触发异步操作\n    fs.readFile(filename, {encoding: 'utf8'}, function (err, contents) {\n\n      // 检查错误\n      if (err) {\n        reject(err)\n        return\n      }\n\n      //读取成功\n      resolve(contents)\n    })\n  })\n}\nlet promise = readFile(path.resolve(__dirname, '../json/a.json'))\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-1-promise-prototype-then"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-promise-prototype-then","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.1 Promise.Prototype.then()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("promise.then(function (contents) {\n  // 完成\n  console.log(contents)\n  return(contents)\n}, function (err) {\n  // 失败\n  console.log(err.message)\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('let taskA = (value) => {\n  console.log("Task A")\n  console.log(value)\n  return value\n}\n\nlet taskB = (value) => {\n  console.log("Task B")\n  console.log(value)\n}\n\npromise\n.then(taskA)\n.then(taskB)\n.catch((err) => {\n  console.log(err.message)\n})\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-2-promise-prototype-catch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-promise-prototype-catch","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.2 Promise.Prototype.catch()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("promise.then(function(value) {\n  // 成功\n  console.log(value)\n}).catch(function (err) {\n  // 失败\n  console.log(err.message)\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-3-promise-prototype-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-promise-prototype-finally","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.3 Promise.Prototype.finally()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Promise.prototype.finally = function (callback) {\n  let P = this.constructor\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  )\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("promise\n.then((contents) => {\n  console.log(contents)\n  return contents\n})\n.catch((err) => {\n  console.log(err.message)\n})\n.finally(() => {\n  console.log('finally')\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-4-promise-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-promise-all","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.4 Promise.all()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const p = Promise.all([p1, p2, p3]);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-5-promise-race"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-promise-race","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.5 Promise.race()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const p = Promise.race([p1, p2, p3]);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function timerPromisefy(delay) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve(delay)\n    }, delay)\n  })\n}\n\nPromise.race([\n  timerPromisefy(10),\n  timerPromisefy(20),\n  timerPromisefy(30)\n]).then(function (values) {\n  console.log(values) // 10\n})\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-6-promise-resolve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-promise-resolve","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.6 Promise.resolve()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const promise = Promise.resolve('hello');\npromise.then(function(value){\n    console.log(value);\n});\n\n// 相当于\nconst promise = new Promise(resolve => {\n   resolve('hello');\n});\npromise.then((value) => {\n  console.log(value)\n})\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-7-promise-reject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-promise-reject","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.7 Promise.reject()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const p = Promise.reject('出错了');\np.then(null, (value) => {\n  console.log(value)\n})\n\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\np.then(null, (value) => {\n  console.log(value)\n})\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"_2-8-promise-try"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-promise-try","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.8 Promise.try()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const f = () => console.log('now');\nPromise.try(f);\nconsole.log('next');\n// now\n// next\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[this._v("#")]),this._v(" 应用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"异步加载图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步加载图片","aria-hidden":"true"}},[this._v("#")]),this._v(" 异步加载图片")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image()\n\n    image.onload = function() {\n      resolve(image)\n    }\n\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url))\n    }\n\n    image.src = url\n  })\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("loadImageAsync('图片路径').then((value) => {\n  document.getElementById('d1').appendChild(value)\n}).catch((err) => {\n  console.log(err.message)\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"异步加载-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步加载-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 异步加载 js")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("let loadScript = function () {\n  return function _loadScript(url, callBack) {\n    return new Promise(function (resolve) {\n      let script = document.createElement('script')\n      script.type = 'text/javascript'\n      if (script.readyState) {\n        // 兼容IE的script加载事件\n        script.onreadystatechange = function () {\n          // loaded ： 下载完毕 complete： 数据准备完毕。这两个状态ie可能同时出现或者只出现一个\n          if (script.readyState === 'loaded' || script.readyState === 'complete') {\n            // 防止加载两次\n            script.onreadystatechange = null\n            callBack()\n            // 把函数传递下去，保证能顺序加载js\n            resolve(_loadScript)\n          }\n        }\n      } else {\n        script.onload = function () {\n          callBack()\n          resolve(_loadScript)\n        }\n      }\n      script.src = url\n      document.head.appendChild(script)\n    })\n  }\n}()\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("loadScript('http://code.jquery.com/jquery-3.2.1.min.js ', () => {})\n    .then(() => {\n      $(\"#d1\").on('click', () => {alert(1)})\n    }).catch((err) => {\n      console.log(err)\n    })\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"request-请求的封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request-请求的封装","aria-hidden":"true"}},[this._v("#")]),this._v(" request 请求的封装")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import axios from './axios'\nimport qs from 'qs'\n\nconst config = {\n  time: +new Date() + '',\n  timeout: 6000,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    time: new Date().getTime()\n  }\n}\n\nfunction checkResponse (response, notice) {\n  return new Promise((resolve, reject) => {\n    let code = Number(response.code)\n    if (code === 0 || code === 200 || code === 2000 || code === 1 || code === 2 || code === '0' || code === 109) {\n      resolve(response)\n    } else {\n      if (notice) {\n        // 提示信息\n        console.log('response-notice', notice)\n      }\n      reject(response)\n    }\n  })\n}\n\nfunction fixURL (url, type) {\n  let result = ''\n  switch (type) {\n    case 'r':\n      result += `/api/v2${url}`\n      break\n  }\n  return result\n}\n\n/**\n * Requests a URL, returning a promise.\n *\n * @param  {object} [options]         The options we want to pass to axios\n * @param  {string} [options.url]     请求的url地址（必须）\n * @param  {string} [options.method]  请求方式， get or post，默认post\n * @param  {object} [options.data]    请求参数\n * @param  {number} [options.timeout] 请求超时时间\n * @param  {boolean} [options.notice] 请求失败是否显示提示，默认true\n * @return {object}                   promise对象\n */\nfunction request (options = {}) {\n  let {\n    url,\n    method,\n    data,\n    timeout,\n    headers,\n    type,\n    notice\n  } = options\n\n  method = method || 'post'\n  data = data || {}\n  type = type || 't'\n  timeout = timeout || config.timeout\n  headers = Object.assign({}, config.headers, headers)\n  notice = notice === undefined ? true : notice\n\n  let result = {}\n  if (method === 'get') {\n    result = new Promise((resolve, reject) => {\n      axios({\n        method: 'get',\n        url: fixURL(url, type),\n        params: data,\n        timeout,\n        headers\n      })\n        .then((res) => {\n          checkResponse(res.data, notice).then((data) => {\n            resolve(data)\n          })\n            .catch((data) => {\n              reject(data)\n            })\n        })\n        .catch((data) => {\n          reject(data)\n        })\n    })\n  } else if (method === 'post') {\n    result = new Promise((resolve, reject) => {\n      axios({\n        method: 'post',\n        url: fixURL(url, type),\n        data: headers['Content-Type'] === 'application/x-www-form-urlencoded' ? qs.stringify(data) : data,\n        timeout,\n        headers\n      })\n        .then((res) => {\n          checkResponse(res.data, notice).then((data) => {\n            resolve(data)\n          })\n            .catch((data) => {\n              reject(data)\n            })\n        })\n        .catch((data) => {\n          reject(data)\n        })\n    })\n  }\n  return result\n}\n\nexport default request\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"附-promise-代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附-promise-代码实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 附 Promise 代码实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 判断变量否为function\nconst isFunction = variable => typeof variable === 'function'\n// 定义Promise的三种状态常量\nconst PENDING = 'PENDING'\nconst FULFILLED = 'FULFILLED'\nconst REJECTED = 'REJECTED'\n\nclass MyPromise {\n  constructor (handle) {\n    if (!isFunction(handle)) {\n      throw new Error('MyPromise must accept a function as a parameter')\n    }\n    // 添加状态\n    this._status = PENDING\n    // 添加状态\n    this._value = undefined\n    // 添加成功回调函数队列\n    this._fulfilledQueues = []\n    // 添加失败回调函数队列\n    this._rejectedQueues = []\n    // 执行handle\n    try {\n      handle(this._resolve.bind(this), this._reject.bind(this)) \n    } catch (err) {\n      this._reject(err)\n    }\n  }\n  // 添加resovle时执行的函数\n  _resolve (val) {\n    const run = () => {\n      if (this._status !== PENDING) return\n      // 依次执行成功队列中的函数，并清空队列\n      const runFulfilled = (value) => {\n        let cb;\n        while (cb = this._fulfilledQueues.shift()) {\n          cb(value)\n        }\n      }\n      // 依次执行失败队列中的函数，并清空队列\n      const runRejected = (error) => {\n        let cb;\n        while (cb = this._rejectedQueues.shift()) {\n          cb(error)\n        }\n      }\n      /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n      */\n      if (val instanceof MyPromise) {\n        val.then(value => {\n          this._value = value\n          this._status = FULFILLED\n          runFulfilled(value)\n        }, err => {\n          this._value = err\n          this._status = REJECTED\n          runRejected(err)\n        })\n      } else {\n        this._value = val\n        this._status = FULFILLED\n        runFulfilled(val)\n      }\n    }\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0)\n  }\n  // 添加reject时执行的函数\n  _reject (err) { \n    if (this._status !== PENDING) return\n    // 依次执行失败队列中的函数，并清空队列\n    const run = () => {\n      this._status = REJECTED\n      this._value = err\n      let cb;\n      while (cb = this._rejectedQueues.shift()) {\n        cb(err)\n      }\n    }\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0)\n  }\n  // 添加then方法\n  then (onFulfilled, onRejected) {\n    const { _value, _status } = this\n    // 返回一个新的Promise对象\n    return new MyPromise((onFulfilledNext, onRejectedNext) => {\n      // 封装一个成功时执行的函数\n      let fulfilled = value => {\n        try {\n          if (!isFunction(onFulfilled)) {\n            onFulfilledNext(value)\n          } else {\n            let res =  onFulfilled(value);\n            if (res instanceof MyPromise) {\n              // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext)\n            } else {\n              //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n              onFulfilledNext(res)\n            }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err)\n        }\n      }\n      // 封装一个失败时执行的函数\n      let rejected = error => {\n        try {\n          if (!isFunction(onRejected)) {\n            onRejectedNext(error)\n          } else {\n              let res = onRejected(error);\n              if (res instanceof MyPromise) {\n                // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                res.then(onFulfilledNext, onRejectedNext)\n              } else {\n                //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                onFulfilledNext(res)\n              }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err)\n        }\n      }\n      switch (_status) {\n        // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n        case PENDING:\n          this._fulfilledQueues.push(fulfilled)\n          this._rejectedQueues.push(rejected)\n          break\n        // 当状态已经改变时，立即执行对应的回调函数\n        case FULFILLED:\n          fulfilled(_value)\n          break\n        case REJECTED:\n          rejected(_value)\n          break\n      }\n    })\n  }\n  // 添加catch方法\n  catch (onRejected) {\n    return this.then(undefined, onRejected)\n  }\n  // 添加静态resolve方法\n  static resolve (value) {\n    // 如果参数是MyPromise实例，直接返回这个实例\n    if (value instanceof MyPromise) return value\n    return new MyPromise(resolve => resolve(value))\n  }\n  // 添加静态reject方法\n  static reject (value) {\n    return new MyPromise((resolve ,reject) => reject(value))\n  }\n  // 添加静态all方法\n  static all (list) {\n    return new MyPromise((resolve, reject) => {\n      /**\n       * 返回值的集合\n       */\n      let values = []\n      let count = 0\n      for (let [i, p] of list.entries()) {\n        // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n        this.resolve(p).then(res => {\n          values[i] = res\n          count++\n          // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n          if (count === list.length) resolve(values)\n        }, err => {\n          // 有一个被rejected时返回的MyPromise状态就变成rejected\n          reject(err)\n        })\n      }\n    })\n  }\n  // 添加静态race方法\n  static race (list) {\n    return new MyPromise((resolve, reject) => {\n      for (let p of list) {\n        // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n        this.resolve(p).then(res => {\n          resolve(res)\n        }, err => {\n          reject(err)\n        })\n      }\n    })\n  }\n  finally (cb) {\n    return this.then(\n      value  => MyPromise.resolve(cb()).then(() => value),\n      reason => MyPromise.resolve(cb()).then(() => { throw reason })\n    );\n  }\n}\n\n\n")])])])}],!1,null,null,null);s.options.__file="promise.md";t.default=s.exports}}]);